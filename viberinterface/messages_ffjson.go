// DO NOT EDIT!
// Code generated by ffjson <https://github.com/pquerna/ffjson>
// source: messages.go
// DO NOT EDIT!

package viberinterface

import (
	"bytes"
	"fmt"
	fflib "github.com/pquerna/ffjson/fflib/v1"
)

func (mj *BaseMessageToReceiver) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if mj == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := mj.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
func (mj *BaseMessageToReceiver) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if mj == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{"receiver":`)
	fflib.WriteJsonString(buf, string(mj.Receiver))
	buf.WriteByte(',')
	if mj.Sender != nil {
		if true {
			buf.WriteString(`"sender":`)

			{

				err = mj.Sender.MarshalJSONBuf(buf)
				if err != nil {
					return err
				}

			}
			buf.WriteByte(',')
		}
	}
	buf.WriteString(`"type":`)
	fflib.WriteJsonString(buf, string(mj.MessageType))
	buf.WriteByte(',')
	if mj.Keyboard != nil {
		if true {
			buf.WriteString(`"keyboard":`)

			{

				err = mj.Keyboard.MarshalJSONBuf(buf)
				if err != nil {
					return err
				}

			}
			buf.WriteByte(',')
		}
	}
	if len(mj.TrackingData) != 0 {
		buf.WriteString(`"tracking_data":`)
		fflib.WriteJsonString(buf, string(mj.TrackingData))
		buf.WriteByte(',')
	}
	buf.WriteString(`"auth_token":`)
	fflib.WriteJsonString(buf, string(mj.Token))
	buf.WriteByte('}')
	return nil
}

const (
	ffj_t_BaseMessageToReceiverbase = iota
	ffj_t_BaseMessageToReceiverno_such_key

	ffj_t_BaseMessageToReceiver_Receiver

	ffj_t_BaseMessageToReceiver_Sender

	ffj_t_BaseMessageToReceiver_MessageType

	ffj_t_BaseMessageToReceiver_Keyboard

	ffj_t_BaseMessageToReceiver_TrackingData

	ffj_t_BaseMessageToReceiver_Token
)

var ffj_key_BaseMessageToReceiver_Receiver = []byte("receiver")

var ffj_key_BaseMessageToReceiver_Sender = []byte("sender")

var ffj_key_BaseMessageToReceiver_MessageType = []byte("type")

var ffj_key_BaseMessageToReceiver_Keyboard = []byte("keyboard")

var ffj_key_BaseMessageToReceiver_TrackingData = []byte("tracking_data")

var ffj_key_BaseMessageToReceiver_Token = []byte("auth_token")

func (uj *BaseMessageToReceiver) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return uj.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

func (uj *BaseMessageToReceiver) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error = nil
	currentKey := ffj_t_BaseMessageToReceiverbase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffj_t_BaseMessageToReceiverno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'a':

					if bytes.Equal(ffj_key_BaseMessageToReceiver_Token, kn) {
						currentKey = ffj_t_BaseMessageToReceiver_Token
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'k':

					if bytes.Equal(ffj_key_BaseMessageToReceiver_Keyboard, kn) {
						currentKey = ffj_t_BaseMessageToReceiver_Keyboard
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'r':

					if bytes.Equal(ffj_key_BaseMessageToReceiver_Receiver, kn) {
						currentKey = ffj_t_BaseMessageToReceiver_Receiver
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 's':

					if bytes.Equal(ffj_key_BaseMessageToReceiver_Sender, kn) {
						currentKey = ffj_t_BaseMessageToReceiver_Sender
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 't':

					if bytes.Equal(ffj_key_BaseMessageToReceiver_MessageType, kn) {
						currentKey = ffj_t_BaseMessageToReceiver_MessageType
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_BaseMessageToReceiver_TrackingData, kn) {
						currentKey = ffj_t_BaseMessageToReceiver_TrackingData
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.EqualFoldRight(ffj_key_BaseMessageToReceiver_Token, kn) {
					currentKey = ffj_t_BaseMessageToReceiver_Token
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_BaseMessageToReceiver_TrackingData, kn) {
					currentKey = ffj_t_BaseMessageToReceiver_TrackingData
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_BaseMessageToReceiver_Keyboard, kn) {
					currentKey = ffj_t_BaseMessageToReceiver_Keyboard
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_BaseMessageToReceiver_MessageType, kn) {
					currentKey = ffj_t_BaseMessageToReceiver_MessageType
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_BaseMessageToReceiver_Sender, kn) {
					currentKey = ffj_t_BaseMessageToReceiver_Sender
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_BaseMessageToReceiver_Receiver, kn) {
					currentKey = ffj_t_BaseMessageToReceiver_Receiver
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffj_t_BaseMessageToReceiverno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffj_t_BaseMessageToReceiver_Receiver:
					goto handle_Receiver

				case ffj_t_BaseMessageToReceiver_Sender:
					goto handle_Sender

				case ffj_t_BaseMessageToReceiver_MessageType:
					goto handle_MessageType

				case ffj_t_BaseMessageToReceiver_Keyboard:
					goto handle_Keyboard

				case ffj_t_BaseMessageToReceiver_TrackingData:
					goto handle_TrackingData

				case ffj_t_BaseMessageToReceiver_Token:
					goto handle_Token

				case ffj_t_BaseMessageToReceiverno_such_key:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_Receiver:

	/* handler: uj.Receiver type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Receiver = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Sender:

	/* handler: uj.Sender type=viberinterface.PaSender kind=struct quoted=false*/

	{
		if tok == fflib.FFTok_null {

			uj.Sender = nil

			state = fflib.FFParse_after_value
			goto mainparse
		}

		if uj.Sender == nil {
			uj.Sender = new(PaSender)
		}

		err = uj.Sender.UnmarshalJSONFFLexer(fs, fflib.FFParse_want_key)
		if err != nil {
			return err
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_MessageType:

	/* handler: uj.MessageType type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.MessageType = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Keyboard:

	/* handler: uj.Keyboard type=viberinterface.Keyboard kind=struct quoted=false*/

	{
		if tok == fflib.FFTok_null {

			uj.Keyboard = nil

			state = fflib.FFParse_after_value
			goto mainparse
		}

		if uj.Keyboard == nil {
			uj.Keyboard = new(Keyboard)
		}

		err = uj.Keyboard.UnmarshalJSONFFLexer(fs, fflib.FFParse_want_key)
		if err != nil {
			return err
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_TrackingData:

	/* handler: uj.TrackingData type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.TrackingData = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Token:

	/* handler: uj.Token type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Token = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:
	return nil
}

func (mj *Contact) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if mj == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := mj.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
func (mj *Contact) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if mj == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{"name":`)
	fflib.WriteJsonString(buf, string(mj.Name))
	buf.WriteString(`,"phone_number":`)
	fflib.WriteJsonString(buf, string(mj.PhoneNumber))
	buf.WriteByte('}')
	return nil
}

const (
	ffj_t_Contactbase = iota
	ffj_t_Contactno_such_key

	ffj_t_Contact_Name

	ffj_t_Contact_PhoneNumber
)

var ffj_key_Contact_Name = []byte("name")

var ffj_key_Contact_PhoneNumber = []byte("phone_number")

func (uj *Contact) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return uj.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

func (uj *Contact) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error = nil
	currentKey := ffj_t_Contactbase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffj_t_Contactno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'n':

					if bytes.Equal(ffj_key_Contact_Name, kn) {
						currentKey = ffj_t_Contact_Name
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'p':

					if bytes.Equal(ffj_key_Contact_PhoneNumber, kn) {
						currentKey = ffj_t_Contact_PhoneNumber
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.AsciiEqualFold(ffj_key_Contact_PhoneNumber, kn) {
					currentKey = ffj_t_Contact_PhoneNumber
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Contact_Name, kn) {
					currentKey = ffj_t_Contact_Name
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffj_t_Contactno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffj_t_Contact_Name:
					goto handle_Name

				case ffj_t_Contact_PhoneNumber:
					goto handle_PhoneNumber

				case ffj_t_Contactno_such_key:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_Name:

	/* handler: uj.Name type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Name = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_PhoneNumber:

	/* handler: uj.PhoneNumber type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.PhoneNumber = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:
	return nil
}

func (mj *ContactMessage) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if mj == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := mj.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
func (mj *ContactMessage) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if mj == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{"contact":`)

	{

		err = mj.Contact.MarshalJSONBuf(buf)
		if err != nil {
			return err
		}

	}
	buf.WriteString(`,"receiver":`)
	fflib.WriteJsonString(buf, string(mj.Receiver))
	buf.WriteByte(',')
	if mj.Sender != nil {
		if true {
			buf.WriteString(`"sender":`)

			{

				err = mj.Sender.MarshalJSONBuf(buf)
				if err != nil {
					return err
				}

			}
			buf.WriteByte(',')
		}
	}
	buf.WriteString(`"type":`)
	fflib.WriteJsonString(buf, string(mj.MessageType))
	buf.WriteByte(',')
	if mj.Keyboard != nil {
		if true {
			buf.WriteString(`"keyboard":`)

			{

				err = mj.Keyboard.MarshalJSONBuf(buf)
				if err != nil {
					return err
				}

			}
			buf.WriteByte(',')
		}
	}
	if len(mj.TrackingData) != 0 {
		buf.WriteString(`"tracking_data":`)
		fflib.WriteJsonString(buf, string(mj.TrackingData))
		buf.WriteByte(',')
	}
	buf.WriteString(`"auth_token":`)
	fflib.WriteJsonString(buf, string(mj.Token))
	buf.WriteByte('}')
	return nil
}

const (
	ffj_t_ContactMessagebase = iota
	ffj_t_ContactMessageno_such_key

	ffj_t_ContactMessage_Contact

	ffj_t_ContactMessage_Receiver

	ffj_t_ContactMessage_Sender

	ffj_t_ContactMessage_MessageType

	ffj_t_ContactMessage_Keyboard

	ffj_t_ContactMessage_TrackingData

	ffj_t_ContactMessage_Token
)

var ffj_key_ContactMessage_Contact = []byte("contact")

var ffj_key_ContactMessage_Receiver = []byte("receiver")

var ffj_key_ContactMessage_Sender = []byte("sender")

var ffj_key_ContactMessage_MessageType = []byte("type")

var ffj_key_ContactMessage_Keyboard = []byte("keyboard")

var ffj_key_ContactMessage_TrackingData = []byte("tracking_data")

var ffj_key_ContactMessage_Token = []byte("auth_token")

func (uj *ContactMessage) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return uj.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

func (uj *ContactMessage) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error = nil
	currentKey := ffj_t_ContactMessagebase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffj_t_ContactMessageno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'a':

					if bytes.Equal(ffj_key_ContactMessage_Token, kn) {
						currentKey = ffj_t_ContactMessage_Token
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'c':

					if bytes.Equal(ffj_key_ContactMessage_Contact, kn) {
						currentKey = ffj_t_ContactMessage_Contact
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'k':

					if bytes.Equal(ffj_key_ContactMessage_Keyboard, kn) {
						currentKey = ffj_t_ContactMessage_Keyboard
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'r':

					if bytes.Equal(ffj_key_ContactMessage_Receiver, kn) {
						currentKey = ffj_t_ContactMessage_Receiver
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 's':

					if bytes.Equal(ffj_key_ContactMessage_Sender, kn) {
						currentKey = ffj_t_ContactMessage_Sender
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 't':

					if bytes.Equal(ffj_key_ContactMessage_MessageType, kn) {
						currentKey = ffj_t_ContactMessage_MessageType
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_ContactMessage_TrackingData, kn) {
						currentKey = ffj_t_ContactMessage_TrackingData
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.EqualFoldRight(ffj_key_ContactMessage_Token, kn) {
					currentKey = ffj_t_ContactMessage_Token
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_ContactMessage_TrackingData, kn) {
					currentKey = ffj_t_ContactMessage_TrackingData
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_ContactMessage_Keyboard, kn) {
					currentKey = ffj_t_ContactMessage_Keyboard
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_ContactMessage_MessageType, kn) {
					currentKey = ffj_t_ContactMessage_MessageType
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_ContactMessage_Sender, kn) {
					currentKey = ffj_t_ContactMessage_Sender
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_ContactMessage_Receiver, kn) {
					currentKey = ffj_t_ContactMessage_Receiver
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_ContactMessage_Contact, kn) {
					currentKey = ffj_t_ContactMessage_Contact
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffj_t_ContactMessageno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffj_t_ContactMessage_Contact:
					goto handle_Contact

				case ffj_t_ContactMessage_Receiver:
					goto handle_Receiver

				case ffj_t_ContactMessage_Sender:
					goto handle_Sender

				case ffj_t_ContactMessage_MessageType:
					goto handle_MessageType

				case ffj_t_ContactMessage_Keyboard:
					goto handle_Keyboard

				case ffj_t_ContactMessage_TrackingData:
					goto handle_TrackingData

				case ffj_t_ContactMessage_Token:
					goto handle_Token

				case ffj_t_ContactMessageno_such_key:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_Contact:

	/* handler: uj.Contact type=viberinterface.Contact kind=struct quoted=false*/

	{
		if tok == fflib.FFTok_null {

			state = fflib.FFParse_after_value
			goto mainparse
		}

		err = uj.Contact.UnmarshalJSONFFLexer(fs, fflib.FFParse_want_key)
		if err != nil {
			return err
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Receiver:

	/* handler: uj.Receiver type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Receiver = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Sender:

	/* handler: uj.Sender type=viberinterface.PaSender kind=struct quoted=false*/

	{
		if tok == fflib.FFTok_null {

			uj.Sender = nil

			state = fflib.FFParse_after_value
			goto mainparse
		}

		if uj.Sender == nil {
			uj.Sender = new(PaSender)
		}

		err = uj.Sender.UnmarshalJSONFFLexer(fs, fflib.FFParse_want_key)
		if err != nil {
			return err
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_MessageType:

	/* handler: uj.MessageType type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.MessageType = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Keyboard:

	/* handler: uj.Keyboard type=viberinterface.Keyboard kind=struct quoted=false*/

	{
		if tok == fflib.FFTok_null {

			uj.Keyboard = nil

			state = fflib.FFParse_after_value
			goto mainparse
		}

		if uj.Keyboard == nil {
			uj.Keyboard = new(Keyboard)
		}

		err = uj.Keyboard.UnmarshalJSONFFLexer(fs, fflib.FFParse_want_key)
		if err != nil {
			return err
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_TrackingData:

	/* handler: uj.TrackingData type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.TrackingData = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Token:

	/* handler: uj.Token type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Token = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:
	return nil
}

func (mj *FileMessage) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if mj == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := mj.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
func (mj *FileMessage) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if mj == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{"media":`)
	fflib.WriteJsonString(buf, string(mj.Media))
	buf.WriteString(`,"file_name":`)
	fflib.WriteJsonString(buf, string(mj.FileName))
	buf.WriteString(`,"size":`)
	fflib.FormatBits2(buf, uint64(mj.Size), 10, mj.Size < 0)
	buf.WriteString(`,"receiver":`)
	fflib.WriteJsonString(buf, string(mj.Receiver))
	buf.WriteByte(',')
	if mj.Sender != nil {
		if true {
			buf.WriteString(`"sender":`)

			{

				err = mj.Sender.MarshalJSONBuf(buf)
				if err != nil {
					return err
				}

			}
			buf.WriteByte(',')
		}
	}
	buf.WriteString(`"type":`)
	fflib.WriteJsonString(buf, string(mj.MessageType))
	buf.WriteByte(',')
	if mj.Keyboard != nil {
		if true {
			buf.WriteString(`"keyboard":`)

			{

				err = mj.Keyboard.MarshalJSONBuf(buf)
				if err != nil {
					return err
				}

			}
			buf.WriteByte(',')
		}
	}
	if len(mj.TrackingData) != 0 {
		buf.WriteString(`"tracking_data":`)
		fflib.WriteJsonString(buf, string(mj.TrackingData))
		buf.WriteByte(',')
	}
	buf.WriteString(`"auth_token":`)
	fflib.WriteJsonString(buf, string(mj.Token))
	buf.WriteByte('}')
	return nil
}

const (
	ffj_t_FileMessagebase = iota
	ffj_t_FileMessageno_such_key

	ffj_t_FileMessage_Media

	ffj_t_FileMessage_FileName

	ffj_t_FileMessage_Size

	ffj_t_FileMessage_Receiver

	ffj_t_FileMessage_Sender

	ffj_t_FileMessage_MessageType

	ffj_t_FileMessage_Keyboard

	ffj_t_FileMessage_TrackingData

	ffj_t_FileMessage_Token
)

var ffj_key_FileMessage_Media = []byte("media")

var ffj_key_FileMessage_FileName = []byte("file_name")

var ffj_key_FileMessage_Size = []byte("size")

var ffj_key_FileMessage_Receiver = []byte("receiver")

var ffj_key_FileMessage_Sender = []byte("sender")

var ffj_key_FileMessage_MessageType = []byte("type")

var ffj_key_FileMessage_Keyboard = []byte("keyboard")

var ffj_key_FileMessage_TrackingData = []byte("tracking_data")

var ffj_key_FileMessage_Token = []byte("auth_token")

func (uj *FileMessage) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return uj.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

func (uj *FileMessage) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error = nil
	currentKey := ffj_t_FileMessagebase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffj_t_FileMessageno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'a':

					if bytes.Equal(ffj_key_FileMessage_Token, kn) {
						currentKey = ffj_t_FileMessage_Token
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'f':

					if bytes.Equal(ffj_key_FileMessage_FileName, kn) {
						currentKey = ffj_t_FileMessage_FileName
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'k':

					if bytes.Equal(ffj_key_FileMessage_Keyboard, kn) {
						currentKey = ffj_t_FileMessage_Keyboard
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'm':

					if bytes.Equal(ffj_key_FileMessage_Media, kn) {
						currentKey = ffj_t_FileMessage_Media
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'r':

					if bytes.Equal(ffj_key_FileMessage_Receiver, kn) {
						currentKey = ffj_t_FileMessage_Receiver
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 's':

					if bytes.Equal(ffj_key_FileMessage_Size, kn) {
						currentKey = ffj_t_FileMessage_Size
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_FileMessage_Sender, kn) {
						currentKey = ffj_t_FileMessage_Sender
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 't':

					if bytes.Equal(ffj_key_FileMessage_MessageType, kn) {
						currentKey = ffj_t_FileMessage_MessageType
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_FileMessage_TrackingData, kn) {
						currentKey = ffj_t_FileMessage_TrackingData
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.EqualFoldRight(ffj_key_FileMessage_Token, kn) {
					currentKey = ffj_t_FileMessage_Token
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_FileMessage_TrackingData, kn) {
					currentKey = ffj_t_FileMessage_TrackingData
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_FileMessage_Keyboard, kn) {
					currentKey = ffj_t_FileMessage_Keyboard
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_FileMessage_MessageType, kn) {
					currentKey = ffj_t_FileMessage_MessageType
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_FileMessage_Sender, kn) {
					currentKey = ffj_t_FileMessage_Sender
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_FileMessage_Receiver, kn) {
					currentKey = ffj_t_FileMessage_Receiver
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_FileMessage_Size, kn) {
					currentKey = ffj_t_FileMessage_Size
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_FileMessage_FileName, kn) {
					currentKey = ffj_t_FileMessage_FileName
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_FileMessage_Media, kn) {
					currentKey = ffj_t_FileMessage_Media
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffj_t_FileMessageno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffj_t_FileMessage_Media:
					goto handle_Media

				case ffj_t_FileMessage_FileName:
					goto handle_FileName

				case ffj_t_FileMessage_Size:
					goto handle_Size

				case ffj_t_FileMessage_Receiver:
					goto handle_Receiver

				case ffj_t_FileMessage_Sender:
					goto handle_Sender

				case ffj_t_FileMessage_MessageType:
					goto handle_MessageType

				case ffj_t_FileMessage_Keyboard:
					goto handle_Keyboard

				case ffj_t_FileMessage_TrackingData:
					goto handle_TrackingData

				case ffj_t_FileMessage_Token:
					goto handle_Token

				case ffj_t_FileMessageno_such_key:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_Media:

	/* handler: uj.Media type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Media = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_FileName:

	/* handler: uj.FileName type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.FileName = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Size:

	/* handler: uj.Size type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.Size = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Receiver:

	/* handler: uj.Receiver type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Receiver = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Sender:

	/* handler: uj.Sender type=viberinterface.PaSender kind=struct quoted=false*/

	{
		if tok == fflib.FFTok_null {

			uj.Sender = nil

			state = fflib.FFParse_after_value
			goto mainparse
		}

		if uj.Sender == nil {
			uj.Sender = new(PaSender)
		}

		err = uj.Sender.UnmarshalJSONFFLexer(fs, fflib.FFParse_want_key)
		if err != nil {
			return err
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_MessageType:

	/* handler: uj.MessageType type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.MessageType = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Keyboard:

	/* handler: uj.Keyboard type=viberinterface.Keyboard kind=struct quoted=false*/

	{
		if tok == fflib.FFTok_null {

			uj.Keyboard = nil

			state = fflib.FFParse_after_value
			goto mainparse
		}

		if uj.Keyboard == nil {
			uj.Keyboard = new(Keyboard)
		}

		err = uj.Keyboard.UnmarshalJSONFFLexer(fs, fflib.FFParse_want_key)
		if err != nil {
			return err
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_TrackingData:

	/* handler: uj.TrackingData type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.TrackingData = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Token:

	/* handler: uj.Token type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Token = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:
	return nil
}

func (mj *KeyboardMessage) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if mj == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := mj.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
func (mj *KeyboardMessage) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if mj == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{"receiver":`)
	fflib.WriteJsonString(buf, string(mj.Receiver))
	buf.WriteByte(',')
	if mj.Sender != nil {
		if true {
			buf.WriteString(`"sender":`)

			{

				err = mj.Sender.MarshalJSONBuf(buf)
				if err != nil {
					return err
				}

			}
			buf.WriteByte(',')
		}
	}
	buf.WriteString(`"type":`)
	fflib.WriteJsonString(buf, string(mj.MessageType))
	buf.WriteByte(',')
	if mj.Keyboard != nil {
		if true {
			buf.WriteString(`"keyboard":`)

			{

				err = mj.Keyboard.MarshalJSONBuf(buf)
				if err != nil {
					return err
				}

			}
			buf.WriteByte(',')
		}
	}
	if len(mj.TrackingData) != 0 {
		buf.WriteString(`"tracking_data":`)
		fflib.WriteJsonString(buf, string(mj.TrackingData))
		buf.WriteByte(',')
	}
	buf.WriteString(`"auth_token":`)
	fflib.WriteJsonString(buf, string(mj.Token))
	buf.WriteByte('}')
	return nil
}

const (
	ffj_t_KeyboardMessagebase = iota
	ffj_t_KeyboardMessageno_such_key

	ffj_t_KeyboardMessage_Receiver

	ffj_t_KeyboardMessage_Sender

	ffj_t_KeyboardMessage_MessageType

	ffj_t_KeyboardMessage_Keyboard

	ffj_t_KeyboardMessage_TrackingData

	ffj_t_KeyboardMessage_Token
)

var ffj_key_KeyboardMessage_Receiver = []byte("receiver")

var ffj_key_KeyboardMessage_Sender = []byte("sender")

var ffj_key_KeyboardMessage_MessageType = []byte("type")

var ffj_key_KeyboardMessage_Keyboard = []byte("keyboard")

var ffj_key_KeyboardMessage_TrackingData = []byte("tracking_data")

var ffj_key_KeyboardMessage_Token = []byte("auth_token")

func (uj *KeyboardMessage) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return uj.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

func (uj *KeyboardMessage) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error = nil
	currentKey := ffj_t_KeyboardMessagebase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffj_t_KeyboardMessageno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'a':

					if bytes.Equal(ffj_key_KeyboardMessage_Token, kn) {
						currentKey = ffj_t_KeyboardMessage_Token
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'k':

					if bytes.Equal(ffj_key_KeyboardMessage_Keyboard, kn) {
						currentKey = ffj_t_KeyboardMessage_Keyboard
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'r':

					if bytes.Equal(ffj_key_KeyboardMessage_Receiver, kn) {
						currentKey = ffj_t_KeyboardMessage_Receiver
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 's':

					if bytes.Equal(ffj_key_KeyboardMessage_Sender, kn) {
						currentKey = ffj_t_KeyboardMessage_Sender
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 't':

					if bytes.Equal(ffj_key_KeyboardMessage_MessageType, kn) {
						currentKey = ffj_t_KeyboardMessage_MessageType
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_KeyboardMessage_TrackingData, kn) {
						currentKey = ffj_t_KeyboardMessage_TrackingData
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.EqualFoldRight(ffj_key_KeyboardMessage_Token, kn) {
					currentKey = ffj_t_KeyboardMessage_Token
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_KeyboardMessage_TrackingData, kn) {
					currentKey = ffj_t_KeyboardMessage_TrackingData
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_KeyboardMessage_Keyboard, kn) {
					currentKey = ffj_t_KeyboardMessage_Keyboard
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_KeyboardMessage_MessageType, kn) {
					currentKey = ffj_t_KeyboardMessage_MessageType
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_KeyboardMessage_Sender, kn) {
					currentKey = ffj_t_KeyboardMessage_Sender
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_KeyboardMessage_Receiver, kn) {
					currentKey = ffj_t_KeyboardMessage_Receiver
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffj_t_KeyboardMessageno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffj_t_KeyboardMessage_Receiver:
					goto handle_Receiver

				case ffj_t_KeyboardMessage_Sender:
					goto handle_Sender

				case ffj_t_KeyboardMessage_MessageType:
					goto handle_MessageType

				case ffj_t_KeyboardMessage_Keyboard:
					goto handle_Keyboard

				case ffj_t_KeyboardMessage_TrackingData:
					goto handle_TrackingData

				case ffj_t_KeyboardMessage_Token:
					goto handle_Token

				case ffj_t_KeyboardMessageno_such_key:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_Receiver:

	/* handler: uj.Receiver type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Receiver = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Sender:

	/* handler: uj.Sender type=viberinterface.PaSender kind=struct quoted=false*/

	{
		if tok == fflib.FFTok_null {

			uj.Sender = nil

			state = fflib.FFParse_after_value
			goto mainparse
		}

		if uj.Sender == nil {
			uj.Sender = new(PaSender)
		}

		err = uj.Sender.UnmarshalJSONFFLexer(fs, fflib.FFParse_want_key)
		if err != nil {
			return err
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_MessageType:

	/* handler: uj.MessageType type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.MessageType = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Keyboard:

	/* handler: uj.Keyboard type=viberinterface.Keyboard kind=struct quoted=false*/

	{
		if tok == fflib.FFTok_null {

			uj.Keyboard = nil

			state = fflib.FFParse_after_value
			goto mainparse
		}

		if uj.Keyboard == nil {
			uj.Keyboard = new(Keyboard)
		}

		err = uj.Keyboard.UnmarshalJSONFFLexer(fs, fflib.FFParse_want_key)
		if err != nil {
			return err
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_TrackingData:

	/* handler: uj.TrackingData type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.TrackingData = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Token:

	/* handler: uj.Token type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Token = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:
	return nil
}

func (mj *Location) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if mj == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := mj.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
func (mj *Location) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if mj == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{"lat":`)
	fflib.WriteJsonString(buf, string(mj.Lat))
	buf.WriteString(`,"lon":`)
	fflib.WriteJsonString(buf, string(mj.Lon))
	buf.WriteByte('}')
	return nil
}

const (
	ffj_t_Locationbase = iota
	ffj_t_Locationno_such_key

	ffj_t_Location_Lat

	ffj_t_Location_Lon
)

var ffj_key_Location_Lat = []byte("lat")

var ffj_key_Location_Lon = []byte("lon")

func (uj *Location) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return uj.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

func (uj *Location) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error = nil
	currentKey := ffj_t_Locationbase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffj_t_Locationno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'l':

					if bytes.Equal(ffj_key_Location_Lat, kn) {
						currentKey = ffj_t_Location_Lat
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Location_Lon, kn) {
						currentKey = ffj_t_Location_Lon
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.SimpleLetterEqualFold(ffj_key_Location_Lon, kn) {
					currentKey = ffj_t_Location_Lon
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Location_Lat, kn) {
					currentKey = ffj_t_Location_Lat
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffj_t_Locationno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffj_t_Location_Lat:
					goto handle_Lat

				case ffj_t_Location_Lon:
					goto handle_Lon

				case ffj_t_Locationno_such_key:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_Lat:

	/* handler: uj.Lat type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Lat = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Lon:

	/* handler: uj.Lon type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Lon = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:
	return nil
}

func (mj *LocationMessage) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if mj == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := mj.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
func (mj *LocationMessage) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if mj == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{"location":`)

	{

		err = mj.Location.MarshalJSONBuf(buf)
		if err != nil {
			return err
		}

	}
	buf.WriteString(`,"receiver":`)
	fflib.WriteJsonString(buf, string(mj.Receiver))
	buf.WriteByte(',')
	if mj.Sender != nil {
		if true {
			buf.WriteString(`"sender":`)

			{

				err = mj.Sender.MarshalJSONBuf(buf)
				if err != nil {
					return err
				}

			}
			buf.WriteByte(',')
		}
	}
	buf.WriteString(`"type":`)
	fflib.WriteJsonString(buf, string(mj.MessageType))
	buf.WriteByte(',')
	if mj.Keyboard != nil {
		if true {
			buf.WriteString(`"keyboard":`)

			{

				err = mj.Keyboard.MarshalJSONBuf(buf)
				if err != nil {
					return err
				}

			}
			buf.WriteByte(',')
		}
	}
	if len(mj.TrackingData) != 0 {
		buf.WriteString(`"tracking_data":`)
		fflib.WriteJsonString(buf, string(mj.TrackingData))
		buf.WriteByte(',')
	}
	buf.WriteString(`"auth_token":`)
	fflib.WriteJsonString(buf, string(mj.Token))
	buf.WriteByte('}')
	return nil
}

const (
	ffj_t_LocationMessagebase = iota
	ffj_t_LocationMessageno_such_key

	ffj_t_LocationMessage_Location

	ffj_t_LocationMessage_Receiver

	ffj_t_LocationMessage_Sender

	ffj_t_LocationMessage_MessageType

	ffj_t_LocationMessage_Keyboard

	ffj_t_LocationMessage_TrackingData

	ffj_t_LocationMessage_Token
)

var ffj_key_LocationMessage_Location = []byte("location")

var ffj_key_LocationMessage_Receiver = []byte("receiver")

var ffj_key_LocationMessage_Sender = []byte("sender")

var ffj_key_LocationMessage_MessageType = []byte("type")

var ffj_key_LocationMessage_Keyboard = []byte("keyboard")

var ffj_key_LocationMessage_TrackingData = []byte("tracking_data")

var ffj_key_LocationMessage_Token = []byte("auth_token")

func (uj *LocationMessage) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return uj.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

func (uj *LocationMessage) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error = nil
	currentKey := ffj_t_LocationMessagebase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffj_t_LocationMessageno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'a':

					if bytes.Equal(ffj_key_LocationMessage_Token, kn) {
						currentKey = ffj_t_LocationMessage_Token
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'k':

					if bytes.Equal(ffj_key_LocationMessage_Keyboard, kn) {
						currentKey = ffj_t_LocationMessage_Keyboard
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'l':

					if bytes.Equal(ffj_key_LocationMessage_Location, kn) {
						currentKey = ffj_t_LocationMessage_Location
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'r':

					if bytes.Equal(ffj_key_LocationMessage_Receiver, kn) {
						currentKey = ffj_t_LocationMessage_Receiver
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 's':

					if bytes.Equal(ffj_key_LocationMessage_Sender, kn) {
						currentKey = ffj_t_LocationMessage_Sender
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 't':

					if bytes.Equal(ffj_key_LocationMessage_MessageType, kn) {
						currentKey = ffj_t_LocationMessage_MessageType
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_LocationMessage_TrackingData, kn) {
						currentKey = ffj_t_LocationMessage_TrackingData
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.EqualFoldRight(ffj_key_LocationMessage_Token, kn) {
					currentKey = ffj_t_LocationMessage_Token
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_LocationMessage_TrackingData, kn) {
					currentKey = ffj_t_LocationMessage_TrackingData
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_LocationMessage_Keyboard, kn) {
					currentKey = ffj_t_LocationMessage_Keyboard
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_LocationMessage_MessageType, kn) {
					currentKey = ffj_t_LocationMessage_MessageType
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_LocationMessage_Sender, kn) {
					currentKey = ffj_t_LocationMessage_Sender
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_LocationMessage_Receiver, kn) {
					currentKey = ffj_t_LocationMessage_Receiver
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_LocationMessage_Location, kn) {
					currentKey = ffj_t_LocationMessage_Location
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffj_t_LocationMessageno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffj_t_LocationMessage_Location:
					goto handle_Location

				case ffj_t_LocationMessage_Receiver:
					goto handle_Receiver

				case ffj_t_LocationMessage_Sender:
					goto handle_Sender

				case ffj_t_LocationMessage_MessageType:
					goto handle_MessageType

				case ffj_t_LocationMessage_Keyboard:
					goto handle_Keyboard

				case ffj_t_LocationMessage_TrackingData:
					goto handle_TrackingData

				case ffj_t_LocationMessage_Token:
					goto handle_Token

				case ffj_t_LocationMessageno_such_key:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_Location:

	/* handler: uj.Location type=viberinterface.Location kind=struct quoted=false*/

	{
		if tok == fflib.FFTok_null {

			state = fflib.FFParse_after_value
			goto mainparse
		}

		err = uj.Location.UnmarshalJSONFFLexer(fs, fflib.FFParse_want_key)
		if err != nil {
			return err
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Receiver:

	/* handler: uj.Receiver type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Receiver = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Sender:

	/* handler: uj.Sender type=viberinterface.PaSender kind=struct quoted=false*/

	{
		if tok == fflib.FFTok_null {

			uj.Sender = nil

			state = fflib.FFParse_after_value
			goto mainparse
		}

		if uj.Sender == nil {
			uj.Sender = new(PaSender)
		}

		err = uj.Sender.UnmarshalJSONFFLexer(fs, fflib.FFParse_want_key)
		if err != nil {
			return err
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_MessageType:

	/* handler: uj.MessageType type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.MessageType = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Keyboard:

	/* handler: uj.Keyboard type=viberinterface.Keyboard kind=struct quoted=false*/

	{
		if tok == fflib.FFTok_null {

			uj.Keyboard = nil

			state = fflib.FFParse_after_value
			goto mainparse
		}

		if uj.Keyboard == nil {
			uj.Keyboard = new(Keyboard)
		}

		err = uj.Keyboard.UnmarshalJSONFFLexer(fs, fflib.FFParse_want_key)
		if err != nil {
			return err
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_TrackingData:

	/* handler: uj.TrackingData type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.TrackingData = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Token:

	/* handler: uj.Token type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Token = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:
	return nil
}

func (mj *PaSender) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if mj == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := mj.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
func (mj *PaSender) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if mj == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{"name":`)
	fflib.WriteJsonString(buf, string(mj.Name))
	buf.WriteString(`,"avatar":`)
	fflib.WriteJsonString(buf, string(mj.Avatar))
	buf.WriteByte('}')
	return nil
}

const (
	ffj_t_PaSenderbase = iota
	ffj_t_PaSenderno_such_key

	ffj_t_PaSender_Name

	ffj_t_PaSender_Avatar
)

var ffj_key_PaSender_Name = []byte("name")

var ffj_key_PaSender_Avatar = []byte("avatar")

func (uj *PaSender) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return uj.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

func (uj *PaSender) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error = nil
	currentKey := ffj_t_PaSenderbase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffj_t_PaSenderno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'a':

					if bytes.Equal(ffj_key_PaSender_Avatar, kn) {
						currentKey = ffj_t_PaSender_Avatar
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'n':

					if bytes.Equal(ffj_key_PaSender_Name, kn) {
						currentKey = ffj_t_PaSender_Name
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.SimpleLetterEqualFold(ffj_key_PaSender_Avatar, kn) {
					currentKey = ffj_t_PaSender_Avatar
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_PaSender_Name, kn) {
					currentKey = ffj_t_PaSender_Name
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffj_t_PaSenderno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffj_t_PaSender_Name:
					goto handle_Name

				case ffj_t_PaSender_Avatar:
					goto handle_Avatar

				case ffj_t_PaSenderno_such_key:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_Name:

	/* handler: uj.Name type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Name = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Avatar:

	/* handler: uj.Avatar type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Avatar = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:
	return nil
}

func (mj *PictureMessage) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if mj == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := mj.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
func (mj *PictureMessage) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if mj == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{"media":`)
	fflib.WriteJsonString(buf, string(mj.Media))
	buf.WriteString(`,"thumbnail":`)
	fflib.WriteJsonString(buf, string(mj.Thumbnail))
	buf.WriteString(`,"text":`)
	fflib.WriteJsonString(buf, string(mj.Text))
	buf.WriteString(`,"receiver":`)
	fflib.WriteJsonString(buf, string(mj.Receiver))
	buf.WriteByte(',')
	if mj.Sender != nil {
		if true {
			buf.WriteString(`"sender":`)

			{

				err = mj.Sender.MarshalJSONBuf(buf)
				if err != nil {
					return err
				}

			}
			buf.WriteByte(',')
		}
	}
	buf.WriteString(`"type":`)
	fflib.WriteJsonString(buf, string(mj.MessageType))
	buf.WriteByte(',')
	if mj.Keyboard != nil {
		if true {
			buf.WriteString(`"keyboard":`)

			{

				err = mj.Keyboard.MarshalJSONBuf(buf)
				if err != nil {
					return err
				}

			}
			buf.WriteByte(',')
		}
	}
	if len(mj.TrackingData) != 0 {
		buf.WriteString(`"tracking_data":`)
		fflib.WriteJsonString(buf, string(mj.TrackingData))
		buf.WriteByte(',')
	}
	buf.WriteString(`"auth_token":`)
	fflib.WriteJsonString(buf, string(mj.Token))
	buf.WriteByte('}')
	return nil
}

const (
	ffj_t_PictureMessagebase = iota
	ffj_t_PictureMessageno_such_key

	ffj_t_PictureMessage_Media

	ffj_t_PictureMessage_Thumbnail

	ffj_t_PictureMessage_Text

	ffj_t_PictureMessage_Receiver

	ffj_t_PictureMessage_Sender

	ffj_t_PictureMessage_MessageType

	ffj_t_PictureMessage_Keyboard

	ffj_t_PictureMessage_TrackingData

	ffj_t_PictureMessage_Token
)

var ffj_key_PictureMessage_Media = []byte("media")

var ffj_key_PictureMessage_Thumbnail = []byte("thumbnail")

var ffj_key_PictureMessage_Text = []byte("text")

var ffj_key_PictureMessage_Receiver = []byte("receiver")

var ffj_key_PictureMessage_Sender = []byte("sender")

var ffj_key_PictureMessage_MessageType = []byte("type")

var ffj_key_PictureMessage_Keyboard = []byte("keyboard")

var ffj_key_PictureMessage_TrackingData = []byte("tracking_data")

var ffj_key_PictureMessage_Token = []byte("auth_token")

func (uj *PictureMessage) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return uj.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

func (uj *PictureMessage) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error = nil
	currentKey := ffj_t_PictureMessagebase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffj_t_PictureMessageno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'a':

					if bytes.Equal(ffj_key_PictureMessage_Token, kn) {
						currentKey = ffj_t_PictureMessage_Token
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'k':

					if bytes.Equal(ffj_key_PictureMessage_Keyboard, kn) {
						currentKey = ffj_t_PictureMessage_Keyboard
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'm':

					if bytes.Equal(ffj_key_PictureMessage_Media, kn) {
						currentKey = ffj_t_PictureMessage_Media
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'r':

					if bytes.Equal(ffj_key_PictureMessage_Receiver, kn) {
						currentKey = ffj_t_PictureMessage_Receiver
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 's':

					if bytes.Equal(ffj_key_PictureMessage_Sender, kn) {
						currentKey = ffj_t_PictureMessage_Sender
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 't':

					if bytes.Equal(ffj_key_PictureMessage_Thumbnail, kn) {
						currentKey = ffj_t_PictureMessage_Thumbnail
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_PictureMessage_Text, kn) {
						currentKey = ffj_t_PictureMessage_Text
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_PictureMessage_MessageType, kn) {
						currentKey = ffj_t_PictureMessage_MessageType
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_PictureMessage_TrackingData, kn) {
						currentKey = ffj_t_PictureMessage_TrackingData
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.EqualFoldRight(ffj_key_PictureMessage_Token, kn) {
					currentKey = ffj_t_PictureMessage_Token
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_PictureMessage_TrackingData, kn) {
					currentKey = ffj_t_PictureMessage_TrackingData
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_PictureMessage_Keyboard, kn) {
					currentKey = ffj_t_PictureMessage_Keyboard
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_PictureMessage_MessageType, kn) {
					currentKey = ffj_t_PictureMessage_MessageType
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_PictureMessage_Sender, kn) {
					currentKey = ffj_t_PictureMessage_Sender
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_PictureMessage_Receiver, kn) {
					currentKey = ffj_t_PictureMessage_Receiver
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_PictureMessage_Text, kn) {
					currentKey = ffj_t_PictureMessage_Text
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_PictureMessage_Thumbnail, kn) {
					currentKey = ffj_t_PictureMessage_Thumbnail
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_PictureMessage_Media, kn) {
					currentKey = ffj_t_PictureMessage_Media
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffj_t_PictureMessageno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffj_t_PictureMessage_Media:
					goto handle_Media

				case ffj_t_PictureMessage_Thumbnail:
					goto handle_Thumbnail

				case ffj_t_PictureMessage_Text:
					goto handle_Text

				case ffj_t_PictureMessage_Receiver:
					goto handle_Receiver

				case ffj_t_PictureMessage_Sender:
					goto handle_Sender

				case ffj_t_PictureMessage_MessageType:
					goto handle_MessageType

				case ffj_t_PictureMessage_Keyboard:
					goto handle_Keyboard

				case ffj_t_PictureMessage_TrackingData:
					goto handle_TrackingData

				case ffj_t_PictureMessage_Token:
					goto handle_Token

				case ffj_t_PictureMessageno_such_key:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_Media:

	/* handler: uj.Media type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Media = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Thumbnail:

	/* handler: uj.Thumbnail type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Thumbnail = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Text:

	/* handler: uj.Text type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Text = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Receiver:

	/* handler: uj.Receiver type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Receiver = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Sender:

	/* handler: uj.Sender type=viberinterface.PaSender kind=struct quoted=false*/

	{
		if tok == fflib.FFTok_null {

			uj.Sender = nil

			state = fflib.FFParse_after_value
			goto mainparse
		}

		if uj.Sender == nil {
			uj.Sender = new(PaSender)
		}

		err = uj.Sender.UnmarshalJSONFFLexer(fs, fflib.FFParse_want_key)
		if err != nil {
			return err
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_MessageType:

	/* handler: uj.MessageType type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.MessageType = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Keyboard:

	/* handler: uj.Keyboard type=viberinterface.Keyboard kind=struct quoted=false*/

	{
		if tok == fflib.FFTok_null {

			uj.Keyboard = nil

			state = fflib.FFParse_after_value
			goto mainparse
		}

		if uj.Keyboard == nil {
			uj.Keyboard = new(Keyboard)
		}

		err = uj.Keyboard.UnmarshalJSONFFLexer(fs, fflib.FFParse_want_key)
		if err != nil {
			return err
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_TrackingData:

	/* handler: uj.TrackingData type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.TrackingData = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Token:

	/* handler: uj.Token type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Token = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:
	return nil
}

func (mj *SendMessageResponse) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if mj == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := mj.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
func (mj *SendMessageResponse) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if mj == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{"status":`)
	fflib.FormatBits2(buf, uint64(mj.Status), 10, mj.Status < 0)
	buf.WriteString(`,"status_message":`)
	fflib.WriteJsonString(buf, string(mj.StatusMessage))
	buf.WriteString(`,"message_token":`)
	fflib.FormatBits2(buf, uint64(mj.MessageToken), 10, mj.MessageToken < 0)
	buf.WriteByte('}')
	return nil
}

const (
	ffj_t_SendMessageResponsebase = iota
	ffj_t_SendMessageResponseno_such_key

	ffj_t_SendMessageResponse_Status

	ffj_t_SendMessageResponse_StatusMessage

	ffj_t_SendMessageResponse_MessageToken
)

var ffj_key_SendMessageResponse_Status = []byte("status")

var ffj_key_SendMessageResponse_StatusMessage = []byte("status_message")

var ffj_key_SendMessageResponse_MessageToken = []byte("message_token")

func (uj *SendMessageResponse) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return uj.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

func (uj *SendMessageResponse) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error = nil
	currentKey := ffj_t_SendMessageResponsebase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffj_t_SendMessageResponseno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'm':

					if bytes.Equal(ffj_key_SendMessageResponse_MessageToken, kn) {
						currentKey = ffj_t_SendMessageResponse_MessageToken
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 's':

					if bytes.Equal(ffj_key_SendMessageResponse_Status, kn) {
						currentKey = ffj_t_SendMessageResponse_Status
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_SendMessageResponse_StatusMessage, kn) {
						currentKey = ffj_t_SendMessageResponse_StatusMessage
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.EqualFoldRight(ffj_key_SendMessageResponse_MessageToken, kn) {
					currentKey = ffj_t_SendMessageResponse_MessageToken
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_SendMessageResponse_StatusMessage, kn) {
					currentKey = ffj_t_SendMessageResponse_StatusMessage
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_SendMessageResponse_Status, kn) {
					currentKey = ffj_t_SendMessageResponse_Status
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffj_t_SendMessageResponseno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffj_t_SendMessageResponse_Status:
					goto handle_Status

				case ffj_t_SendMessageResponse_StatusMessage:
					goto handle_StatusMessage

				case ffj_t_SendMessageResponse_MessageToken:
					goto handle_MessageToken

				case ffj_t_SendMessageResponseno_such_key:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_Status:

	/* handler: uj.Status type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.Status = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_StatusMessage:

	/* handler: uj.StatusMessage type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.StatusMessage = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_MessageToken:

	/* handler: uj.MessageToken type=int64 kind=int64 quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.MessageToken = int64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:
	return nil
}

func (mj *SetWebhookMessage) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if mj == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := mj.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
func (mj *SetWebhookMessage) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if mj == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{"url":`)
	fflib.WriteJsonString(buf, string(mj.Url))
	buf.WriteByte(',')
	if len(mj.EventTypes) != 0 {
		buf.WriteString(`"event_types":`)
		if mj.EventTypes != nil {
			buf.WriteString(`[`)
			for i, v := range mj.EventTypes {
				if i != 0 {
					buf.WriteString(`,`)
				}
				fflib.WriteJsonString(buf, string(v))
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	buf.WriteString(`"auth_token":`)
	fflib.WriteJsonString(buf, string(mj.Token))
	buf.WriteByte('}')
	return nil
}

const (
	ffj_t_SetWebhookMessagebase = iota
	ffj_t_SetWebhookMessageno_such_key

	ffj_t_SetWebhookMessage_Url

	ffj_t_SetWebhookMessage_EventTypes

	ffj_t_SetWebhookMessage_Token
)

var ffj_key_SetWebhookMessage_Url = []byte("url")

var ffj_key_SetWebhookMessage_EventTypes = []byte("event_types")

var ffj_key_SetWebhookMessage_Token = []byte("auth_token")

func (uj *SetWebhookMessage) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return uj.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

func (uj *SetWebhookMessage) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error = nil
	currentKey := ffj_t_SetWebhookMessagebase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffj_t_SetWebhookMessageno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'a':

					if bytes.Equal(ffj_key_SetWebhookMessage_Token, kn) {
						currentKey = ffj_t_SetWebhookMessage_Token
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'e':

					if bytes.Equal(ffj_key_SetWebhookMessage_EventTypes, kn) {
						currentKey = ffj_t_SetWebhookMessage_EventTypes
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'u':

					if bytes.Equal(ffj_key_SetWebhookMessage_Url, kn) {
						currentKey = ffj_t_SetWebhookMessage_Url
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.EqualFoldRight(ffj_key_SetWebhookMessage_Token, kn) {
					currentKey = ffj_t_SetWebhookMessage_Token
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_SetWebhookMessage_EventTypes, kn) {
					currentKey = ffj_t_SetWebhookMessage_EventTypes
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_SetWebhookMessage_Url, kn) {
					currentKey = ffj_t_SetWebhookMessage_Url
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffj_t_SetWebhookMessageno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffj_t_SetWebhookMessage_Url:
					goto handle_Url

				case ffj_t_SetWebhookMessage_EventTypes:
					goto handle_EventTypes

				case ffj_t_SetWebhookMessage_Token:
					goto handle_Token

				case ffj_t_SetWebhookMessageno_such_key:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_Url:

	/* handler: uj.URL type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Url = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_EventTypes:

	/* handler: uj.EventTypes type=[]string kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			uj.EventTypes = nil
		} else {

			uj.EventTypes = []string{}

			wantVal := true

			for {

				var tmp_uj__EventTypes string

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmp_uj__EventTypes type=string kind=string quoted=false*/

				{

					{
						if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
							return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
						}
					}

					if tok == fflib.FFTok_null {

					} else {

						outBuf := fs.Output.Bytes()

						tmp_uj__EventTypes = string(string(outBuf))

					}
				}

				uj.EventTypes = append(uj.EventTypes, tmp_uj__EventTypes)

				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Token:

	/* handler: uj.Token type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Token = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:
	return nil
}

func (mj *SetWebhookResponse) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if mj == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := mj.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
func (mj *SetWebhookResponse) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if mj == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{ "status":`)
	fflib.FormatBits2(buf, uint64(mj.Status), 10, mj.Status < 0)
	buf.WriteString(`,"status_message":`)
	fflib.WriteJsonString(buf, string(mj.StatusMessage))
	buf.WriteByte(',')
	if len(mj.EventTypes) != 0 {
		buf.WriteString(`"event_types":`)
		if mj.EventTypes != nil {
			buf.WriteString(`[`)
			for i, v := range mj.EventTypes {
				if i != 0 {
					buf.WriteString(`,`)
				}
				fflib.WriteJsonString(buf, string(v))
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	buf.Rewind(1)
	buf.WriteByte('}')
	return nil
}

const (
	ffj_t_SetWebhookResponsebase = iota
	ffj_t_SetWebhookResponseno_such_key

	ffj_t_SetWebhookResponse_Status

	ffj_t_SetWebhookResponse_StatusMessage

	ffj_t_SetWebhookResponse_EventTypes
)

var ffj_key_SetWebhookResponse_Status = []byte("status")

var ffj_key_SetWebhookResponse_StatusMessage = []byte("status_message")

var ffj_key_SetWebhookResponse_EventTypes = []byte("event_types")

func (uj *SetWebhookResponse) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return uj.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

func (uj *SetWebhookResponse) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error = nil
	currentKey := ffj_t_SetWebhookResponsebase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffj_t_SetWebhookResponseno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'e':

					if bytes.Equal(ffj_key_SetWebhookResponse_EventTypes, kn) {
						currentKey = ffj_t_SetWebhookResponse_EventTypes
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 's':

					if bytes.Equal(ffj_key_SetWebhookResponse_Status, kn) {
						currentKey = ffj_t_SetWebhookResponse_Status
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_SetWebhookResponse_StatusMessage, kn) {
						currentKey = ffj_t_SetWebhookResponse_StatusMessage
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.EqualFoldRight(ffj_key_SetWebhookResponse_EventTypes, kn) {
					currentKey = ffj_t_SetWebhookResponse_EventTypes
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_SetWebhookResponse_StatusMessage, kn) {
					currentKey = ffj_t_SetWebhookResponse_StatusMessage
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_SetWebhookResponse_Status, kn) {
					currentKey = ffj_t_SetWebhookResponse_Status
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffj_t_SetWebhookResponseno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffj_t_SetWebhookResponse_Status:
					goto handle_Status

				case ffj_t_SetWebhookResponse_StatusMessage:
					goto handle_StatusMessage

				case ffj_t_SetWebhookResponse_EventTypes:
					goto handle_EventTypes

				case ffj_t_SetWebhookResponseno_such_key:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_Status:

	/* handler: uj.Status type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.Status = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_StatusMessage:

	/* handler: uj.StatusMessage type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.StatusMessage = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_EventTypes:

	/* handler: uj.EventTypes type=[]string kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			uj.EventTypes = nil
		} else {

			uj.EventTypes = []string{}

			wantVal := true

			for {

				var tmp_uj__EventTypes string

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmp_uj__EventTypes type=string kind=string quoted=false*/

				{

					{
						if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
							return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
						}
					}

					if tok == fflib.FFTok_null {

					} else {

						outBuf := fs.Output.Bytes()

						tmp_uj__EventTypes = string(string(outBuf))

					}
				}

				uj.EventTypes = append(uj.EventTypes, tmp_uj__EventTypes)

				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:
	return nil
}

func (mj *StickerMessage) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if mj == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := mj.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
func (mj *StickerMessage) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if mj == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{"sticker_id":`)
	fflib.WriteJsonString(buf, string(mj.StickerID))
	buf.WriteString(`,"receiver":`)
	fflib.WriteJsonString(buf, string(mj.Receiver))
	buf.WriteByte(',')
	if mj.Sender != nil {
		if true {
			buf.WriteString(`"sender":`)

			{

				err = mj.Sender.MarshalJSONBuf(buf)
				if err != nil {
					return err
				}

			}
			buf.WriteByte(',')
		}
	}
	buf.WriteString(`"type":`)
	fflib.WriteJsonString(buf, string(mj.MessageType))
	buf.WriteByte(',')
	if mj.Keyboard != nil {
		if true {
			buf.WriteString(`"keyboard":`)

			{

				err = mj.Keyboard.MarshalJSONBuf(buf)
				if err != nil {
					return err
				}

			}
			buf.WriteByte(',')
		}
	}
	if len(mj.TrackingData) != 0 {
		buf.WriteString(`"tracking_data":`)
		fflib.WriteJsonString(buf, string(mj.TrackingData))
		buf.WriteByte(',')
	}
	buf.WriteString(`"auth_token":`)
	fflib.WriteJsonString(buf, string(mj.Token))
	buf.WriteByte('}')
	return nil
}

const (
	ffj_t_StickerMessagebase = iota
	ffj_t_StickerMessageno_such_key

	ffj_t_StickerMessage_StickerID

	ffj_t_StickerMessage_Receiver

	ffj_t_StickerMessage_Sender

	ffj_t_StickerMessage_MessageType

	ffj_t_StickerMessage_Keyboard

	ffj_t_StickerMessage_TrackingData

	ffj_t_StickerMessage_Token
)

var ffj_key_StickerMessage_StickerID = []byte("sticker_id")

var ffj_key_StickerMessage_Receiver = []byte("receiver")

var ffj_key_StickerMessage_Sender = []byte("sender")

var ffj_key_StickerMessage_MessageType = []byte("type")

var ffj_key_StickerMessage_Keyboard = []byte("keyboard")

var ffj_key_StickerMessage_TrackingData = []byte("tracking_data")

var ffj_key_StickerMessage_Token = []byte("auth_token")

func (uj *StickerMessage) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return uj.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

func (uj *StickerMessage) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error = nil
	currentKey := ffj_t_StickerMessagebase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffj_t_StickerMessageno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'a':

					if bytes.Equal(ffj_key_StickerMessage_Token, kn) {
						currentKey = ffj_t_StickerMessage_Token
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'k':

					if bytes.Equal(ffj_key_StickerMessage_Keyboard, kn) {
						currentKey = ffj_t_StickerMessage_Keyboard
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'r':

					if bytes.Equal(ffj_key_StickerMessage_Receiver, kn) {
						currentKey = ffj_t_StickerMessage_Receiver
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 's':

					if bytes.Equal(ffj_key_StickerMessage_StickerID, kn) {
						currentKey = ffj_t_StickerMessage_StickerID
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_StickerMessage_Sender, kn) {
						currentKey = ffj_t_StickerMessage_Sender
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 't':

					if bytes.Equal(ffj_key_StickerMessage_MessageType, kn) {
						currentKey = ffj_t_StickerMessage_MessageType
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_StickerMessage_TrackingData, kn) {
						currentKey = ffj_t_StickerMessage_TrackingData
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.EqualFoldRight(ffj_key_StickerMessage_Token, kn) {
					currentKey = ffj_t_StickerMessage_Token
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_StickerMessage_TrackingData, kn) {
					currentKey = ffj_t_StickerMessage_TrackingData
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_StickerMessage_Keyboard, kn) {
					currentKey = ffj_t_StickerMessage_Keyboard
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_StickerMessage_MessageType, kn) {
					currentKey = ffj_t_StickerMessage_MessageType
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_StickerMessage_Sender, kn) {
					currentKey = ffj_t_StickerMessage_Sender
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_StickerMessage_Receiver, kn) {
					currentKey = ffj_t_StickerMessage_Receiver
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_StickerMessage_StickerID, kn) {
					currentKey = ffj_t_StickerMessage_StickerID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffj_t_StickerMessageno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffj_t_StickerMessage_StickerID:
					goto handle_StickerID

				case ffj_t_StickerMessage_Receiver:
					goto handle_Receiver

				case ffj_t_StickerMessage_Sender:
					goto handle_Sender

				case ffj_t_StickerMessage_MessageType:
					goto handle_MessageType

				case ffj_t_StickerMessage_Keyboard:
					goto handle_Keyboard

				case ffj_t_StickerMessage_TrackingData:
					goto handle_TrackingData

				case ffj_t_StickerMessage_Token:
					goto handle_Token

				case ffj_t_StickerMessageno_such_key:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_StickerID:

	/* handler: uj.StickerID type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.StickerID = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Receiver:

	/* handler: uj.Receiver type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Receiver = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Sender:

	/* handler: uj.Sender type=viberinterface.PaSender kind=struct quoted=false*/

	{
		if tok == fflib.FFTok_null {

			uj.Sender = nil

			state = fflib.FFParse_after_value
			goto mainparse
		}

		if uj.Sender == nil {
			uj.Sender = new(PaSender)
		}

		err = uj.Sender.UnmarshalJSONFFLexer(fs, fflib.FFParse_want_key)
		if err != nil {
			return err
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_MessageType:

	/* handler: uj.MessageType type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.MessageType = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Keyboard:

	/* handler: uj.Keyboard type=viberinterface.Keyboard kind=struct quoted=false*/

	{
		if tok == fflib.FFTok_null {

			uj.Keyboard = nil

			state = fflib.FFParse_after_value
			goto mainparse
		}

		if uj.Keyboard == nil {
			uj.Keyboard = new(Keyboard)
		}

		err = uj.Keyboard.UnmarshalJSONFFLexer(fs, fflib.FFParse_want_key)
		if err != nil {
			return err
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_TrackingData:

	/* handler: uj.TrackingData type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.TrackingData = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Token:

	/* handler: uj.Token type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Token = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:
	return nil
}

func (mj *TextMessage) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if mj == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := mj.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
func (mj *TextMessage) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if mj == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{"text":`)
	fflib.WriteJsonString(buf, string(mj.Text))
	buf.WriteString(`,"receiver":`)
	fflib.WriteJsonString(buf, string(mj.Receiver))
	buf.WriteByte(',')
	if mj.Sender != nil {
		if true {
			buf.WriteString(`"sender":`)

			{

				err = mj.Sender.MarshalJSONBuf(buf)
				if err != nil {
					return err
				}

			}
			buf.WriteByte(',')
		}
	}
	buf.WriteString(`"type":`)
	fflib.WriteJsonString(buf, string(mj.MessageType))
	buf.WriteByte(',')
	if mj.Keyboard != nil {
		if true {
			buf.WriteString(`"keyboard":`)

			{

				err = mj.Keyboard.MarshalJSONBuf(buf)
				if err != nil {
					return err
				}

			}
			buf.WriteByte(',')
		}
	}
	if len(mj.TrackingData) != 0 {
		buf.WriteString(`"tracking_data":`)
		fflib.WriteJsonString(buf, string(mj.TrackingData))
		buf.WriteByte(',')
	}
	buf.WriteString(`"auth_token":`)
	fflib.WriteJsonString(buf, string(mj.Token))
	buf.WriteByte('}')
	return nil
}

const (
	ffj_t_TextMessagebase = iota
	ffj_t_TextMessageno_such_key

	ffj_t_TextMessage_Text

	ffj_t_TextMessage_Receiver

	ffj_t_TextMessage_Sender

	ffj_t_TextMessage_MessageType

	ffj_t_TextMessage_Keyboard

	ffj_t_TextMessage_TrackingData

	ffj_t_TextMessage_Token
)

var ffj_key_TextMessage_Text = []byte("text")

var ffj_key_TextMessage_Receiver = []byte("receiver")

var ffj_key_TextMessage_Sender = []byte("sender")

var ffj_key_TextMessage_MessageType = []byte("type")

var ffj_key_TextMessage_Keyboard = []byte("keyboard")

var ffj_key_TextMessage_TrackingData = []byte("tracking_data")

var ffj_key_TextMessage_Token = []byte("auth_token")

func (uj *TextMessage) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return uj.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

func (uj *TextMessage) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error = nil
	currentKey := ffj_t_TextMessagebase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffj_t_TextMessageno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'a':

					if bytes.Equal(ffj_key_TextMessage_Token, kn) {
						currentKey = ffj_t_TextMessage_Token
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'k':

					if bytes.Equal(ffj_key_TextMessage_Keyboard, kn) {
						currentKey = ffj_t_TextMessage_Keyboard
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'r':

					if bytes.Equal(ffj_key_TextMessage_Receiver, kn) {
						currentKey = ffj_t_TextMessage_Receiver
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 's':

					if bytes.Equal(ffj_key_TextMessage_Sender, kn) {
						currentKey = ffj_t_TextMessage_Sender
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 't':

					if bytes.Equal(ffj_key_TextMessage_Text, kn) {
						currentKey = ffj_t_TextMessage_Text
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_TextMessage_MessageType, kn) {
						currentKey = ffj_t_TextMessage_MessageType
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_TextMessage_TrackingData, kn) {
						currentKey = ffj_t_TextMessage_TrackingData
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.EqualFoldRight(ffj_key_TextMessage_Token, kn) {
					currentKey = ffj_t_TextMessage_Token
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_TextMessage_TrackingData, kn) {
					currentKey = ffj_t_TextMessage_TrackingData
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_TextMessage_Keyboard, kn) {
					currentKey = ffj_t_TextMessage_Keyboard
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_TextMessage_MessageType, kn) {
					currentKey = ffj_t_TextMessage_MessageType
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_TextMessage_Sender, kn) {
					currentKey = ffj_t_TextMessage_Sender
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_TextMessage_Receiver, kn) {
					currentKey = ffj_t_TextMessage_Receiver
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_TextMessage_Text, kn) {
					currentKey = ffj_t_TextMessage_Text
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffj_t_TextMessageno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffj_t_TextMessage_Text:
					goto handle_Text

				case ffj_t_TextMessage_Receiver:
					goto handle_Receiver

				case ffj_t_TextMessage_Sender:
					goto handle_Sender

				case ffj_t_TextMessage_MessageType:
					goto handle_MessageType

				case ffj_t_TextMessage_Keyboard:
					goto handle_Keyboard

				case ffj_t_TextMessage_TrackingData:
					goto handle_TrackingData

				case ffj_t_TextMessage_Token:
					goto handle_Token

				case ffj_t_TextMessageno_such_key:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_Text:

	/* handler: uj.Text type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Text = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Receiver:

	/* handler: uj.Receiver type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Receiver = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Sender:

	/* handler: uj.Sender type=viberinterface.PaSender kind=struct quoted=false*/

	{
		if tok == fflib.FFTok_null {

			uj.Sender = nil

			state = fflib.FFParse_after_value
			goto mainparse
		}

		if uj.Sender == nil {
			uj.Sender = new(PaSender)
		}

		err = uj.Sender.UnmarshalJSONFFLexer(fs, fflib.FFParse_want_key)
		if err != nil {
			return err
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_MessageType:

	/* handler: uj.MessageType type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.MessageType = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Keyboard:

	/* handler: uj.Keyboard type=viberinterface.Keyboard kind=struct quoted=false*/

	{
		if tok == fflib.FFTok_null {

			uj.Keyboard = nil

			state = fflib.FFParse_after_value
			goto mainparse
		}

		if uj.Keyboard == nil {
			uj.Keyboard = new(Keyboard)
		}

		err = uj.Keyboard.UnmarshalJSONFFLexer(fs, fflib.FFParse_want_key)
		if err != nil {
			return err
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_TrackingData:

	/* handler: uj.TrackingData type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.TrackingData = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Token:

	/* handler: uj.Token type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Token = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:
	return nil
}

func (mj *UrlMessage) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if mj == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := mj.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
func (mj *UrlMessage) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if mj == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{"media":`)
	fflib.WriteJsonString(buf, string(mj.Media))
	buf.WriteString(`,"receiver":`)
	fflib.WriteJsonString(buf, string(mj.Receiver))
	buf.WriteByte(',')
	if mj.Sender != nil {
		if true {
			buf.WriteString(`"sender":`)

			{

				err = mj.Sender.MarshalJSONBuf(buf)
				if err != nil {
					return err
				}

			}
			buf.WriteByte(',')
		}
	}
	buf.WriteString(`"type":`)
	fflib.WriteJsonString(buf, string(mj.MessageType))
	buf.WriteByte(',')
	if mj.Keyboard != nil {
		if true {
			buf.WriteString(`"keyboard":`)

			{

				err = mj.Keyboard.MarshalJSONBuf(buf)
				if err != nil {
					return err
				}

			}
			buf.WriteByte(',')
		}
	}
	if len(mj.TrackingData) != 0 {
		buf.WriteString(`"tracking_data":`)
		fflib.WriteJsonString(buf, string(mj.TrackingData))
		buf.WriteByte(',')
	}
	buf.WriteString(`"auth_token":`)
	fflib.WriteJsonString(buf, string(mj.Token))
	buf.WriteByte('}')
	return nil
}

const (
	ffj_t_UrlMessagebase = iota
	ffj_t_UrlMessageno_such_key

	ffj_t_UrlMessage_Media

	ffj_t_UrlMessage_Receiver

	ffj_t_UrlMessage_Sender

	ffj_t_UrlMessage_MessageType

	ffj_t_UrlMessage_Keyboard

	ffj_t_UrlMessage_TrackingData

	ffj_t_UrlMessage_Token
)

var ffj_key_UrlMessage_Media = []byte("media")

var ffj_key_UrlMessage_Receiver = []byte("receiver")

var ffj_key_UrlMessage_Sender = []byte("sender")

var ffj_key_UrlMessage_MessageType = []byte("type")

var ffj_key_UrlMessage_Keyboard = []byte("keyboard")

var ffj_key_UrlMessage_TrackingData = []byte("tracking_data")

var ffj_key_UrlMessage_Token = []byte("auth_token")

func (uj *UrlMessage) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return uj.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

func (uj *UrlMessage) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error = nil
	currentKey := ffj_t_UrlMessagebase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffj_t_UrlMessageno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'a':

					if bytes.Equal(ffj_key_UrlMessage_Token, kn) {
						currentKey = ffj_t_UrlMessage_Token
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'k':

					if bytes.Equal(ffj_key_UrlMessage_Keyboard, kn) {
						currentKey = ffj_t_UrlMessage_Keyboard
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'm':

					if bytes.Equal(ffj_key_UrlMessage_Media, kn) {
						currentKey = ffj_t_UrlMessage_Media
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'r':

					if bytes.Equal(ffj_key_UrlMessage_Receiver, kn) {
						currentKey = ffj_t_UrlMessage_Receiver
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 's':

					if bytes.Equal(ffj_key_UrlMessage_Sender, kn) {
						currentKey = ffj_t_UrlMessage_Sender
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 't':

					if bytes.Equal(ffj_key_UrlMessage_MessageType, kn) {
						currentKey = ffj_t_UrlMessage_MessageType
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_UrlMessage_TrackingData, kn) {
						currentKey = ffj_t_UrlMessage_TrackingData
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.EqualFoldRight(ffj_key_UrlMessage_Token, kn) {
					currentKey = ffj_t_UrlMessage_Token
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_UrlMessage_TrackingData, kn) {
					currentKey = ffj_t_UrlMessage_TrackingData
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_UrlMessage_Keyboard, kn) {
					currentKey = ffj_t_UrlMessage_Keyboard
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_UrlMessage_MessageType, kn) {
					currentKey = ffj_t_UrlMessage_MessageType
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_UrlMessage_Sender, kn) {
					currentKey = ffj_t_UrlMessage_Sender
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_UrlMessage_Receiver, kn) {
					currentKey = ffj_t_UrlMessage_Receiver
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_UrlMessage_Media, kn) {
					currentKey = ffj_t_UrlMessage_Media
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffj_t_UrlMessageno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffj_t_UrlMessage_Media:
					goto handle_Media

				case ffj_t_UrlMessage_Receiver:
					goto handle_Receiver

				case ffj_t_UrlMessage_Sender:
					goto handle_Sender

				case ffj_t_UrlMessage_MessageType:
					goto handle_MessageType

				case ffj_t_UrlMessage_Keyboard:
					goto handle_Keyboard

				case ffj_t_UrlMessage_TrackingData:
					goto handle_TrackingData

				case ffj_t_UrlMessage_Token:
					goto handle_Token

				case ffj_t_UrlMessageno_such_key:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_Media:

	/* handler: uj.Media type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Media = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Receiver:

	/* handler: uj.Receiver type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Receiver = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Sender:

	/* handler: uj.Sender type=viberinterface.PaSender kind=struct quoted=false*/

	{
		if tok == fflib.FFTok_null {

			uj.Sender = nil

			state = fflib.FFParse_after_value
			goto mainparse
		}

		if uj.Sender == nil {
			uj.Sender = new(PaSender)
		}

		err = uj.Sender.UnmarshalJSONFFLexer(fs, fflib.FFParse_want_key)
		if err != nil {
			return err
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_MessageType:

	/* handler: uj.MessageType type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.MessageType = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Keyboard:

	/* handler: uj.Keyboard type=viberinterface.Keyboard kind=struct quoted=false*/

	{
		if tok == fflib.FFTok_null {

			uj.Keyboard = nil

			state = fflib.FFParse_after_value
			goto mainparse
		}

		if uj.Keyboard == nil {
			uj.Keyboard = new(Keyboard)
		}

		err = uj.Keyboard.UnmarshalJSONFFLexer(fs, fflib.FFParse_want_key)
		if err != nil {
			return err
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_TrackingData:

	/* handler: uj.TrackingData type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.TrackingData = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Token:

	/* handler: uj.Token type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Token = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:
	return nil
}

func (mj *ViberAuth) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if mj == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := mj.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
func (mj *ViberAuth) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if mj == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{"auth_token":`)
	fflib.WriteJsonString(buf, string(mj.Token))
	buf.WriteByte('}')
	return nil
}

const (
	ffj_t_ViberAuthbase = iota
	ffj_t_ViberAuthno_such_key

	ffj_t_ViberAuth_Token
)

var ffj_key_ViberAuth_Token = []byte("auth_token")

func (uj *ViberAuth) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return uj.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

func (uj *ViberAuth) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error = nil
	currentKey := ffj_t_ViberAuthbase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffj_t_ViberAuthno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'a':

					if bytes.Equal(ffj_key_ViberAuth_Token, kn) {
						currentKey = ffj_t_ViberAuth_Token
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.EqualFoldRight(ffj_key_ViberAuth_Token, kn) {
					currentKey = ffj_t_ViberAuth_Token
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffj_t_ViberAuthno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffj_t_ViberAuth_Token:
					goto handle_Token

				case ffj_t_ViberAuthno_such_key:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_Token:

	/* handler: uj.Token type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Token = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:
	return nil
}

func (mj *VideoMessage) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if mj == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := mj.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
func (mj *VideoMessage) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if mj == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{"size":`)
	fflib.FormatBits2(buf, uint64(mj.Size), 10, mj.Size < 0)
	buf.WriteString(`,"duration":`)
	fflib.FormatBits2(buf, uint64(mj.Duration), 10, mj.Duration < 0)
	buf.WriteString(`,"media":`)
	fflib.WriteJsonString(buf, string(mj.Media))
	buf.WriteString(`,"thumbnail":`)
	fflib.WriteJsonString(buf, string(mj.Thumbnail))
	buf.WriteString(`,"text":`)
	fflib.WriteJsonString(buf, string(mj.Text))
	buf.WriteString(`,"receiver":`)
	fflib.WriteJsonString(buf, string(mj.Receiver))
	buf.WriteByte(',')
	if mj.Sender != nil {
		if true {
			buf.WriteString(`"sender":`)

			{

				err = mj.Sender.MarshalJSONBuf(buf)
				if err != nil {
					return err
				}

			}
			buf.WriteByte(',')
		}
	}
	buf.WriteString(`"type":`)
	fflib.WriteJsonString(buf, string(mj.MessageType))
	buf.WriteByte(',')
	if mj.Keyboard != nil {
		if true {
			buf.WriteString(`"keyboard":`)

			{

				err = mj.Keyboard.MarshalJSONBuf(buf)
				if err != nil {
					return err
				}

			}
			buf.WriteByte(',')
		}
	}
	if len(mj.TrackingData) != 0 {
		buf.WriteString(`"tracking_data":`)
		fflib.WriteJsonString(buf, string(mj.TrackingData))
		buf.WriteByte(',')
	}
	buf.WriteString(`"auth_token":`)
	fflib.WriteJsonString(buf, string(mj.Token))
	buf.WriteByte('}')
	return nil
}

const (
	ffj_t_VideoMessagebase = iota
	ffj_t_VideoMessageno_such_key

	ffj_t_VideoMessage_Size

	ffj_t_VideoMessage_Duration

	ffj_t_VideoMessage_Media

	ffj_t_VideoMessage_Thumbnail

	ffj_t_VideoMessage_Text

	ffj_t_VideoMessage_Receiver

	ffj_t_VideoMessage_Sender

	ffj_t_VideoMessage_MessageType

	ffj_t_VideoMessage_Keyboard

	ffj_t_VideoMessage_TrackingData

	ffj_t_VideoMessage_Token
)

var ffj_key_VideoMessage_Size = []byte("size")

var ffj_key_VideoMessage_Duration = []byte("duration")

var ffj_key_VideoMessage_Media = []byte("media")

var ffj_key_VideoMessage_Thumbnail = []byte("thumbnail")

var ffj_key_VideoMessage_Text = []byte("text")

var ffj_key_VideoMessage_Receiver = []byte("receiver")

var ffj_key_VideoMessage_Sender = []byte("sender")

var ffj_key_VideoMessage_MessageType = []byte("type")

var ffj_key_VideoMessage_Keyboard = []byte("keyboard")

var ffj_key_VideoMessage_TrackingData = []byte("tracking_data")

var ffj_key_VideoMessage_Token = []byte("auth_token")

func (uj *VideoMessage) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return uj.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

func (uj *VideoMessage) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error = nil
	currentKey := ffj_t_VideoMessagebase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffj_t_VideoMessageno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'a':

					if bytes.Equal(ffj_key_VideoMessage_Token, kn) {
						currentKey = ffj_t_VideoMessage_Token
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'd':

					if bytes.Equal(ffj_key_VideoMessage_Duration, kn) {
						currentKey = ffj_t_VideoMessage_Duration
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'k':

					if bytes.Equal(ffj_key_VideoMessage_Keyboard, kn) {
						currentKey = ffj_t_VideoMessage_Keyboard
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'm':

					if bytes.Equal(ffj_key_VideoMessage_Media, kn) {
						currentKey = ffj_t_VideoMessage_Media
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'r':

					if bytes.Equal(ffj_key_VideoMessage_Receiver, kn) {
						currentKey = ffj_t_VideoMessage_Receiver
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 's':

					if bytes.Equal(ffj_key_VideoMessage_Size, kn) {
						currentKey = ffj_t_VideoMessage_Size
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_VideoMessage_Sender, kn) {
						currentKey = ffj_t_VideoMessage_Sender
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 't':

					if bytes.Equal(ffj_key_VideoMessage_Thumbnail, kn) {
						currentKey = ffj_t_VideoMessage_Thumbnail
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_VideoMessage_Text, kn) {
						currentKey = ffj_t_VideoMessage_Text
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_VideoMessage_MessageType, kn) {
						currentKey = ffj_t_VideoMessage_MessageType
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_VideoMessage_TrackingData, kn) {
						currentKey = ffj_t_VideoMessage_TrackingData
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.EqualFoldRight(ffj_key_VideoMessage_Token, kn) {
					currentKey = ffj_t_VideoMessage_Token
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_VideoMessage_TrackingData, kn) {
					currentKey = ffj_t_VideoMessage_TrackingData
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_VideoMessage_Keyboard, kn) {
					currentKey = ffj_t_VideoMessage_Keyboard
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_VideoMessage_MessageType, kn) {
					currentKey = ffj_t_VideoMessage_MessageType
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_VideoMessage_Sender, kn) {
					currentKey = ffj_t_VideoMessage_Sender
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_VideoMessage_Receiver, kn) {
					currentKey = ffj_t_VideoMessage_Receiver
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_VideoMessage_Text, kn) {
					currentKey = ffj_t_VideoMessage_Text
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_VideoMessage_Thumbnail, kn) {
					currentKey = ffj_t_VideoMessage_Thumbnail
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_VideoMessage_Media, kn) {
					currentKey = ffj_t_VideoMessage_Media
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_VideoMessage_Duration, kn) {
					currentKey = ffj_t_VideoMessage_Duration
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_VideoMessage_Size, kn) {
					currentKey = ffj_t_VideoMessage_Size
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffj_t_VideoMessageno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffj_t_VideoMessage_Size:
					goto handle_Size

				case ffj_t_VideoMessage_Duration:
					goto handle_Duration

				case ffj_t_VideoMessage_Media:
					goto handle_Media

				case ffj_t_VideoMessage_Thumbnail:
					goto handle_Thumbnail

				case ffj_t_VideoMessage_Text:
					goto handle_Text

				case ffj_t_VideoMessage_Receiver:
					goto handle_Receiver

				case ffj_t_VideoMessage_Sender:
					goto handle_Sender

				case ffj_t_VideoMessage_MessageType:
					goto handle_MessageType

				case ffj_t_VideoMessage_Keyboard:
					goto handle_Keyboard

				case ffj_t_VideoMessage_TrackingData:
					goto handle_TrackingData

				case ffj_t_VideoMessage_Token:
					goto handle_Token

				case ffj_t_VideoMessageno_such_key:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_Size:

	/* handler: uj.Size type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.Size = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Duration:

	/* handler: uj.Duration type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.Duration = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Media:

	/* handler: uj.Media type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Media = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Thumbnail:

	/* handler: uj.Thumbnail type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Thumbnail = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Text:

	/* handler: uj.Text type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Text = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Receiver:

	/* handler: uj.Receiver type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Receiver = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Sender:

	/* handler: uj.Sender type=viberinterface.PaSender kind=struct quoted=false*/

	{
		if tok == fflib.FFTok_null {

			uj.Sender = nil

			state = fflib.FFParse_after_value
			goto mainparse
		}

		if uj.Sender == nil {
			uj.Sender = new(PaSender)
		}

		err = uj.Sender.UnmarshalJSONFFLexer(fs, fflib.FFParse_want_key)
		if err != nil {
			return err
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_MessageType:

	/* handler: uj.MessageType type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.MessageType = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Keyboard:

	/* handler: uj.Keyboard type=viberinterface.Keyboard kind=struct quoted=false*/

	{
		if tok == fflib.FFTok_null {

			uj.Keyboard = nil

			state = fflib.FFParse_after_value
			goto mainparse
		}

		if uj.Keyboard == nil {
			uj.Keyboard = new(Keyboard)
		}

		err = uj.Keyboard.UnmarshalJSONFFLexer(fs, fflib.FFParse_want_key)
		if err != nil {
			return err
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_TrackingData:

	/* handler: uj.TrackingData type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.TrackingData = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Token:

	/* handler: uj.Token type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Token = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:
	return nil
}

func (mj *WebhookCallback) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if mj == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := mj.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
func (mj *WebhookCallback) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if mj == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{"event":`)
	fflib.WriteJsonString(buf, string(mj.Event))
	buf.WriteString(`,"timestamp":`)
	fflib.FormatBits2(buf, uint64(mj.Timestamp), 10, mj.Timestamp < 0)
	buf.WriteString(`,"message_token":`)
	fflib.FormatBits2(buf, uint64(mj.MessageToken), 10, mj.MessageToken < 0)
	buf.WriteByte('}')
	return nil
}

const (
	ffj_t_WebhookCallbackbase = iota
	ffj_t_WebhookCallbackno_such_key

	ffj_t_WebhookCallback_Event

	ffj_t_WebhookCallback_Timestamp

	ffj_t_WebhookCallback_MessageToken
)

var ffj_key_WebhookCallback_Event = []byte("event")

var ffj_key_WebhookCallback_Timestamp = []byte("timestamp")

var ffj_key_WebhookCallback_MessageToken = []byte("message_token")

func (uj *WebhookCallback) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return uj.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

func (uj *WebhookCallback) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error = nil
	currentKey := ffj_t_WebhookCallbackbase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffj_t_WebhookCallbackno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'e':

					if bytes.Equal(ffj_key_WebhookCallback_Event, kn) {
						currentKey = ffj_t_WebhookCallback_Event
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'm':

					if bytes.Equal(ffj_key_WebhookCallback_MessageToken, kn) {
						currentKey = ffj_t_WebhookCallback_MessageToken
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 't':

					if bytes.Equal(ffj_key_WebhookCallback_Timestamp, kn) {
						currentKey = ffj_t_WebhookCallback_Timestamp
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.EqualFoldRight(ffj_key_WebhookCallback_MessageToken, kn) {
					currentKey = ffj_t_WebhookCallback_MessageToken
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_WebhookCallback_Timestamp, kn) {
					currentKey = ffj_t_WebhookCallback_Timestamp
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_WebhookCallback_Event, kn) {
					currentKey = ffj_t_WebhookCallback_Event
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffj_t_WebhookCallbackno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffj_t_WebhookCallback_Event:
					goto handle_Event

				case ffj_t_WebhookCallback_Timestamp:
					goto handle_Timestamp

				case ffj_t_WebhookCallback_MessageToken:
					goto handle_MessageToken

				case ffj_t_WebhookCallbackno_such_key:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_Event:

	/* handler: uj.Event type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Event = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Timestamp:

	/* handler: uj.Timestamp type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.Timestamp = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_MessageToken:

	/* handler: uj.MessageToken type=int64 kind=int64 quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.MessageToken = int64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:
	return nil
}

func (mj *isMessageToViber) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if mj == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := mj.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
func (mj *isMessageToViber) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if mj == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{}`)
	return nil
}

const (
	ffj_t_isMessageToViberbase = iota
	ffj_t_isMessageToViberno_such_key
)

func (uj *isMessageToViber) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return uj.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

func (uj *isMessageToViber) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error = nil
	currentKey := ffj_t_isMessageToViberbase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffj_t_isMessageToViberno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				}

				currentKey = ffj_t_isMessageToViberno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffj_t_isMessageToViberno_such_key:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:
	return nil
}
